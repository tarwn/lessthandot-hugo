<?xml version="1.0" encoding="utf-8"?>
<sqlcop>
	<version>23</version>
	<sqlserver>
		<category>
		  <type>Code</type>
		  <problems>
<problem>
  <name>Decimal Size Problem</name>
  <description>Find all stored procedures where precision and scale not specified for decimals.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/always-include-precision-and-scale-with</reference>
  <versions>
    <version>SQL2000</version>
  </versions>
  <query>
    SELECT DISTINCT su.name + '.' + so.Name As ProblemItem
    FROM   syscomments sc
           INNER JOIN sysobjects so
             ON sc.id = so.id
             AND so.xtype = 'P'
           INNER JOIN sysusers su
             ON so.uid = su.uid
    WHERE  (REPLACE(REPLACE(sc.text, ' ', ''), 'decimal]','decimal') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%decimal[^(]%'
           Or REPLACE(REPLACE(sc.text, ' ', ''), 'numeric]','numeric') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%[^i][^s]numeric[^(]%')
           And OBJECTPROPERTY(sc.Id, N'IsMSSHIPPED') = 0
    ORDER BY su.name + '.' + so.Name
  </query>
  <detail>
    Select text
    FROM   syscomments
    WHERE  id=OBJECT_ID('~ProblemItem~')
    order by colid
  </detail>
</problem>
<problem>
  <name>Decimal Size Problem</name>
  <description>Find all stored procedures where precision and scale not specified for decimals.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/always-include-precision-and-scale-with</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select Schema_Name(Schema_id) + '.' + name As ProblemItem
    From   sys.objects
    WHERE  REPLACE(Object_Definition(Object_ID), 'decimal]','decimal') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%decimal[^(]%'
           Or REPLACE(Object_Definition(Object_ID), 'numeric]','numeric') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%[^i][^s]numeric[^(]%'
    Order By Schema_Name(Schema_id), name
  </query>
  <detail>
    Select text
    FROM   syscomments
    WHERE  id=OBJECT_ID('~ProblemItem~')
    order by colid
  </detail>
</problem>
			
		<problem>
			<name>Procedures using dynamic SQL without sp_executesql</name>
			<description>Find procedures that use dynamic sql</description>
			<reference>http://www.sommarskog.se/dynamic_sql.html</reference>
			<versions>
				<version>SQL2000</version>
			</versions>
		  	<query>
				SELECT DISTINCT su.name + '.' + so.Name As ProblemItem
				From   SYSCOMMENTS sc
					   Inner Join SYSOBJECTS so
					     On  sc.id = so.id
						 And so.xtype = 'P'
					   Inner join SYSUSERS su
						 On so.uid = su.uid
				Where  Replace(sc.text, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%Exec(%'
				       And ObjectProperty(sc.Id, N'IsMSSHIPPED') = 0
				Order By su.name + '.' + so.Name
			</query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid
			  </detail>
			</problem>
		<problem>
			<name>Procedures with dynamic SQL</name>
			<description>Find procedures that use dynamic sql</description>
			<reference>http://www.sommarskog.se/dynamic_sql.html</reference>
			<versions>
				<version>SQL2005</version>
				<version>SQL2008</version>
			</versions>
		  	<query>
				SELECT SCHEMA_NAME(so.uid) + '.' + so.name As ProblemItem
				From   sys.sql_modules sm
					   Inner Join sys.sysobjects so
					     On  sm.object_id = so.id
						 And so.type = 'P'
				Where  Replace(sm.definition, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%Exec(%'
				       And OBJECTPROPERTY(so.Id, N'IsMSSHIPPED') = 0
				Order By SCHEMA_NAME(so.uid) + '.' + so.Name
			</query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid
			  </detail>
			</problem>			  
		<problem>
			<name>Procedures using dynamic SQL without sp_executesql</name>
			<description>Find procedures that use EXEC without sp_executesql</description>
			<reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/avoid-conversions-in-execution-plans-by-</reference>
			<versions>
				<version>SQL2005</version>
				<version>SQL2008</version>
			</versions>
		  	<query>
				SELECT SCHEMA_NAME(so.uid) + '.' + so.name As ProblemItem
				From   sys.sql_modules sm
					   Inner Join sys.sysobjects so
					     On  sm.object_id = so.id
						 And so.type = 'P'
				Where  Replace(sm.definition, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%Exec(%'
				       And Replace(sm.definition, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Not Like '%sp_Executesql%'
				       And OBJECTPROPERTY(so.Id, N'IsMSSHIPPED') = 0
				Order By SCHEMA_NAME(so.uid) + '.' + so.Name
			</query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid
			  </detail>
			</problem>	
			<problem>
			  <name>Procedures with SP_</name>
			  <description>Finds all stored procedures with a naming convention beginning with SP_</description>
			  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/don-t-start-your-procedures-with-sp_</reference>
			  <versions>
				<version>SQL2000</version>
				<version>SQL2005</version>
				<version>SQL2008</version>
			  </versions>
  			  <query>
				Select	SPECIFIC_SCHEMA + '.' + SPECIFIC_NAME As ProblemItem
				From	INFORMATION_SCHEMA.ROUTINES
				Where	SPECIFIC_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE 'sp[_]%'
						And SPECIFIC_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI NOT LIKE '%diagram%'
				Order By SPECIFIC_SCHEMA,SPECIFIC_NAME
			  </query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid
			  </detail>
			</problem>
			<problem>
			  <name>Procedures without SET NOCOUNT ON</name>
			  <description>Find all procedures without SET NOCOUNT ON</description>
			  <reference>http://wiki.lessthandot.com/index.php/Optimization:_Set_Nocount_On</reference>
			  <versions>
				<version>SQL2000</version>
			  </versions>
			  <query>
				Select	su.name + '.' + so.name As ProblemItem
				From	sysobjects so
						Inner Join sysusers su
							On so.uid = su.uid
						Left Join (
							Select id
							From   syscomments
							Where  text COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%SET NOCOUNT ON%'
							) As GoodProcs
							On so.id = GoodProcs.id
				WHERE	so.xtype = 'P'
						AND GoodProcs.id IS NULL
						AND so.name Not In('sp_helpdiagrams','sp_upgraddiagrams')
				ORDER BY su.name, so.name
			  </query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid			  
			  </detail>
			</problem>			
			<problem>
			  <name>Procedures without SET NOCOUNT ON</name>
			  <description>Find all procedures without SET NOCOUNT ON</description>
			  <reference>http://wiki.lessthandot.com/index.php/Optimization:_Set_Nocount_On</reference>
			  <versions>
				<version>SQL2005</version>
				<version>SQL2008</version>
			  </versions>
			  <query>
				SELECT	SCHEMA_NAME(so.uid) + '.' + so.name As ProblemItem
				From	sysobjects so
						LEFT JOIN (
							SELECT	id
							FROM	syscomments
							WHERE	text COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%SET NOCOUNT ON%'
						) As GoodProcs	
							On so.id = GoodProcs.id
				Where	so.xtype = 'P'
						And GoodProcs.id Is NULL
						AND so.name Not In('sp_helpdiagrams','sp_upgraddiagrams')
				Order BY SCHEMA_NAME(so.uid), so.name
			  </query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid			  
			  </detail>
			</problem>
			<problem>
			  <name>Procedures with SET ROWCOUNT</name>
			  <description>Find all procedures with SET ROWCOUNT ON</description>
			  <reference>http://sqltips.wordpress.com/2007/08/19/set-rowcount-will-not-be-supported-in-future-version-of-sql-server/</reference>
			  <versions>
				<version>SQL2005</version>
				<version>SQL2008</version>
			  </versions>			  
			  <query>
				SELECT  DISTINCT SchemaName + '.' + Name As ProblemItem
				FROM    (
						SELECT	s.Name, c.text, SCHEMA_NAME(s.uid) As SchemaName
						FROM	sysobjects s
								INNER JOIN syscomments c
									ON  s.id = c.id
									And s.xtype = 'P'
						WHERE   OBJECTPROPERTY(s.id, N'IsMSShipped') = 0
								AND c.Text COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%SET ROWCOUNT%'

						UNION ALL

						SELECT	OBJECT_NAME(a.id), LeftText + RightText, SCHEMA_NAME(s.uid) As SchemaName
						FROM	sysobjects s
								INNER JOIN (
									SELECT	id, RIGHT(text, 10) AS LeftText, ColId
									FROM	syscomments
								) AS a
								ON  s.id = a.id
								AND OBJECTPROPERTY(s.ID, N'IsMSShipped') = 0
								AND s.xtype = 'P'
								INNER JOIN (
									SELECT	id, LEFT(text, 10) AS RightText, ColId
									FROM	syscomments
								) AS b
								ON  a.id = b.id
								AND a.ColId = b.ColId - 1
						WHERE	LeftText COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI + RightText COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%SET ROWCOUNT%'
						) AS a
				WHERE	REPLACE(text, ' ','') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%SETROWCOUNT%'
				ORDER BY SchemaName + '.' + Name
			  </query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid			  </detail>
			</problem>
			<problem>
			  <name>Procedures with @@Identity</name>
			  <description>Find procedures using @@Identity instead of Scope_Identity()</description>
			  <reference>http://wiki.lessthandot.com/index.php/6_Different_Ways_To_Get_The_Current_Identity_Value</reference>
			  <versions>
				<version>SQL2000</version>
			  </versions>
			  <query>
				SELECT	DISTINCT su.name + '.' + so.Name As ProblemItem
				FROM	syscomments sc
						INNER JOIN sysobjects so
							ON sc.id = so.id
							AND so.xtype = 'P'
						INNER JOIN sysusers su
							On so.uid = su.uid
				WHERE	REPLACE(text, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%@@Identity%'
						And OBJECTPROPERTY(sc.Id, N'IsMSSHIPPED') = 0
						AND so.name Not In('sp_helpdiagrams','sp_upgraddiagrams','sp_creatediagram')
				ORDER BY su.name + '.' + so.Name
			  </query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid			  </detail>
			</problem>
			<problem>
			  <name>Procedures with @@Identity</name>
			  <description>Find procedures using @@Identity instead of Scope_Identity()</description>
			  <reference>http://wiki.lessthandot.com/index.php/6_Different_Ways_To_Get_The_Current_Identity_Value</reference>
			  <versions>
				<version>SQL2005</version>
				<version>SQL2008</version>
			  </versions>
			  <query>
				SELECT  Distinct SchemaName + '.' + Name As ProblemItem
				FROM    (
				        SELECT  s.Name, c.text, SCHEMA_NAME(s.uid) As SchemaName
				        FROM	sysobjects s
				                INNER JOIN syscomments c
				                  ON  s.id = c.id
				                  And s.xtype = 'P'
				        WHERE   OBJECTPROPERTY(s.id, N'IsMSShipped') = 0
				                And c.text COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%@@identity%'

						UNION ALL

						SELECT	OBJECT_NAME(a.id), LeftText + RightText, SCHEMA_NAME(s.uid) As SchemaName
				        FROM	sysobjects s
				                INNER JOIN (
				                  SELECT	id, RIGHT(text, 10) AS LeftText, ColId
				                  FROM      syscomments
				                  ) AS a
				                  ON  s.id = a.id
				                  And OBJECTPROPERTY(s.ID, N'IsMSShipped') = 0
				                  And s.xtype = 'P'
				                INNER JOIN (
				                  SELECT	id, LEFT(text, 10) AS RightText, ColId
								  FROM      syscomments
					              ) AS b
				                  ON  a.id = b.id
				                  and a.ColId = a.ColId - 1
				        WHERE   LeftText COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI + RightText COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%@@identity%'
				        ) AS a
				WHERE	Replace(text, ' ','') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%@@identity%'
					AND name Not In('sp_helpdiagrams','sp_upgraddiagrams','sp_creatediagram')
				ORDER BY SchemaName + '.' + Name
			  </query>
			  <detail>
				Select text
				FROM syscomments
				WHERE id=OBJECT_ID('~ProblemItem~')
				order by colid			  </detail>
			</problem>
<problem>
  <name>Undocumented Procedures</name>
  <description>Find all stored procedures that use undocumented SQL Server procedures</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/identify-procedures-that-call-sql-server</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    SET NOCOUNT ON
    DECLARE @Temp TABLE(ProcedureName VARCHAR(50))

    INSERT INTO @Temp VALUES('sp_MStablespace')
    INSERT INTO @Temp VALUES('sp_who2')
    INSERT INTO @Temp VALUES('sp_tempdbspace')
    INSERT INTO @Temp VALUES('sp_MSkilldb')
    INSERT INTO @Temp VALUES('sp_MSindexspace')
    INSERT INTO @Temp VALUES('sp_MShelptype')
    INSERT INTO @Temp VALUES('sp_MShelpindex')
    INSERT INTO @Temp VALUES('sp_MShelpcolumns')
    INSERT INTO @Temp VALUES('sp_MSforeachtable')
    INSERT INTO @Temp VALUES('sp_MSforeachdb')
    INSERT INTO @Temp VALUES('sp_fixindex')
    INSERT INTO @Temp VALUES('sp_columns_rowset')
    INSERT INTO @Temp VALUES('sp_MScheck_uid_owns_anything')
    INSERT INTO @Temp VALUES('sp_MSgettools_path')
    INSERT INTO @Temp VALUES('sp_gettypestring')
    INSERT INTO @Temp VALUES('sp_MSdrop_object')
    INSERT INTO @Temp VALUES('sp_MSget_qualified_name')
    INSERT INTO @Temp VALUES('sp_MSgetversion')
    INSERT INTO @Temp VALUES('xp_dirtree')
    INSERT INTO @Temp VALUES('xp_subdirs')
    INSERT INTO @Temp VALUES('xp_enum_oledb_providers')
    INSERT INTO @Temp VALUES('xp_enumcodepages')
    INSERT INTO @Temp VALUES('xp_enumdsn')
    INSERT INTO @Temp VALUES('xp_enumerrorlogs')
    INSERT INTO @Temp VALUES('xp_enumgroups')
    INSERT INTO @Temp VALUES('xp_fileexist')
    INSERT INTO @Temp VALUES('xp_fixeddrives')
    INSERT INTO @Temp VALUES('xp_getnetname')
    INSERT INTO @Temp VALUES('xp_readerrorlog')
    INSERT INTO @Temp VALUES('sp_msdependencies')
    INSERT INTO @Temp VALUES('xp_qv')
    INSERT INTO @Temp VALUES('xp_delete_file')
    INSERT INTO @Temp VALUES('sp_checknames')
    INSERT INTO @Temp VALUES('sp_enumoledbdatasources')
    INSERT INTO @Temp VALUES('sp_MS_marksystemobject')
    INSERT INTO @Temp VALUES('sp_MSaddguidcolumn')
    INSERT INTO @Temp VALUES('sp_MSaddguidindex')
    INSERT INTO @Temp VALUES('sp_MSaddlogin_implicit_ntlogin')
    INSERT INTO @Temp VALUES('sp_MSadduser_implicit_ntlogin')
    INSERT INTO @Temp VALUES('sp_MSdbuseraccess')
    INSERT INTO @Temp VALUES('sp_MSdbuserpriv')
    INSERT INTO @Temp VALUES('sp_MSloginmappings')
    INSERT INTO @Temp VALUES('sp_MStablekeys')
    INSERT INTO @Temp VALUES('sp_MStablerefs')
    INSERT INTO @Temp VALUES('sp_MSuniquetempname')
    INSERT INTO @Temp VALUES('sp_MSuniqueobjectname')
    INSERT INTO @Temp VALUES('sp_MSuniquecolname')
    INSERT INTO @Temp VALUES('sp_MSuniquename')
    INSERT INTO @Temp VALUES('sp_MSunc_to_drive')
    INSERT INTO @Temp VALUES('sp_MSis_pk_col')
    INSERT INTO @Temp VALUES('xp_get_MAPI_default_profile')
    INSERT INTO @Temp VALUES('xp_get_MAPI_profiles')
    INSERT INTO @Temp VALUES('xp_regdeletekey')
    INSERT INTO @Temp VALUES('xp_regdeletevalue')
    INSERT INTO @Temp VALUES('xp_regread')
    INSERT INTO @Temp VALUES('xp_regenumvalues')
    INSERT INTO @Temp VALUES('xp_regaddmultistring')
    INSERT INTO @Temp VALUES('xp_regremovemultistring')
    INSERT INTO @Temp VALUES('xp_regwrite')
    INSERT INTO @Temp VALUES('xp_varbintohexstr')
    INSERT INTO @Temp VALUES('sp_MSguidtostr')

    SELECT DISTINCT u.name + '.' +o.Name As ProblemItem
    FROM   sysobjects o
           INNER JOIN syscomments c
             ON o.id = c.id
             AND o.xtype = 'P'
           INNER JOIN sysusers u
             ON o.uid = u.uid
           INNER JOIN @Temp t
             ON c.text COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%' + t.ProcedureName + '%'
    WHERE  xtype = 'P'
           AND OBJECTPROPERTY(o.id, N'IsMSShipped') = 0
    ORDER BY u.name + '.' + o.Name 
  </query>
  <detail>
    Select text
    FROM   syscomments
    WHERE  id=OBJECT_ID('~ProblemItem~')
    order  by colid
  </detail>
</problem>
<problem>
  <name>VarChar Size Problems</name>
  <description>Find all stored procedures where varchar sizes are not specified</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/always-include-size-when-using-varchar-n</reference>
  <versions>
    <version>SQL2000</version>
  </versions>
  <query>
    SELECT DISTINCT su.name + '.' + so.Name As ProblemItem
    From   SYSCOMMENTS sc
           Inner Join SYSOBJECTS so
             On  sc.id = so.id
             And so.xtype = 'P'
           Inner join SYSUSERS su
             On so.uid = su.uid
    Where  REPLACE(Replace(sc.text, ' ', ''), 'varchar]','varchar') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%varchar[^(]%'
           And ObjectProperty(sc.Id, N'IsMSSHIPPED') = 0
    Order By su.name + '.' + so.Name
  </query>
  <detail>
    Select text
    FROM syscomments
    WHERE id=OBJECT_ID('~ProblemItem~')
    order by colid
  </detail>
</problem>
<problem>
  <name>VarChar Size Problems</name>
  <description>Find all stored procedures where varchar sizes are not specified</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/always-include-size-when-using-varchar-n</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    SELECT DISTINCT su.name + '.' + so.name As ProblemItem
    FROM   syscomments sc
           INNER JOIN sysobjects so
             ON sc.id = so.id
             AND so.xtype = 'P'
           INNER JOIN sys.schemas su
             ON so.uid = su.schema_id
    WHERE  REPLACE(REPLACE(sc.Text, ' ', ''), 'varchar]', 'varchar') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%varchar[^(]%'
           AND OBJECTPROPERTY(sc.Id, N'IsMSSHIPPED') = 0
    ORDER BY su.name + '.' + so.Name
  </query>
  <detail>
    Select text
    FROM syscomments
    WHERE id=OBJECT_ID('~ProblemItem~')
    order by colid
  </detail>
</problem>
			
		  </problems>
		</category>
    <category>
      <type>Column</type>
      <problems>
	<problem>
	  <name>Column Data Types (Numeric vs. Int)</name>
	  <description>Find numeric columns with scale = 0</description>
	  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/sql-server-types-numeric-vs-int</reference>
	  <versions>
            <version>SQL2000</version>
            <version>SQL2005</version>
            <version>SQL2008</version>
          </versions>
	  <query>
	    SELECT TABLE_SCHEMA + '.' + TABLE_NAME + '.' + COLUMN_NAME As ProblemItem
            FROM INFORMATION_SCHEMA.COLUMNS C
            WHERE C.DATA_TYPE IN ('numeric','decimal') AND NUMERIC_SCALE = 0 AND NUMERIC_PRECISION &lt;= 18
	  </query>
	  <detail></detail>
	</problem>
        <problem>
          <name>Column Name Problems</name>
		  <description>Find all columns with poor naming conventions</description>
          <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/do-not-use-spaces-or-other-invalid-chara</reference>
          <versions>
            <version>SQL2000</version>
            <version>SQL2005</version>
            <version>SQL2008</version>
          </versions>
          <query>
			DECLARE @AcceptableSymbols VARCHAR(100)

			SET @AcceptableSymbols = '_$'

			SELECT 	TABLE_SCHEMA + '.' + TABLE_NAME + '.' + COLUMN_NAME AS ProblemItem
			FROM	INFORMATION_SCHEMA.COLUMNS
			WHERE	COLUMN_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%[^a-z' + @AcceptableSymbols + ']%'
			ORDER BY TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME
          </query>
          <detail></detail>
        </problem>
		<problem>
		  <name>Columns with float data type</name>
		  <description>Find all columns with the float data type</description>
		  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/do-not-use-the-float-data-type</reference>
		  <versions>
			<version>SQL2000</version>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>
		  <query>
			SELECT	TABLE_SCHEMA + '.' + TABLE_NAME + '.' + COLUMN_NAME AS ProblemItem 
			FROM	INFORMATION_SCHEMA.COLUMNS 
			WHERE	DATA_TYPE IN ('float', 'real')
			ORDER BY TABLE_SCHEMA,TABLE_NAME,COLUMN_NAME
		  </query>
		  <detail></detail>
		</problem>
		<problem>
		  <name>Columns with image data type</name>
		  <description>Find all columns with the image data type.</description>
		  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/don-t-use-text-datatype-for-sql-2005-and</reference>
		  <versions>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>		  <query>
			  SELECT  SCHEMA_NAME(o.uid) + '.' + o.Name + '.' + col.name as ProblemItem
			  from    syscolumns col         
					  Inner Join sysobjects o
						On col.id = o.id         
					  inner join systypes           
					 	On col.xtype = systypes.xtype 
			  Where   o.type = 'U'         
					  And ObjectProperty(o.id, N'IsMSShipped') = 0         
					  And systypes.name In ('image') 
			  Order By SCHEMA_NAME(o.uid),o.Name, col.Name
		  </query>
		  <detail></detail>
		</problem>
		<problem>
		  <name>Tables with text/ntext</name>
		  <description>Find all columns that are text/ntext instead of varchar(max)</description>
		  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/don-t-use-text-datatype-for-sql-2005-and</reference>
		  <versions>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>
		  <query>
		     SELECT  SCHEMA_NAME(o.uid) + '.' + o.Name + '.' + col.name as ProblemItem
	             FROM    syscolumns col
                             INNER JOIN sysobjects o
                                ON col.id = o.id
                             INNER JOIN systypes
                               ON col.xtype = systypes.xtype
                     WHERE   o.type = 'U'
                             AND OBJECTPROPERTY(o.id, N'IsMSShipped') = 0
                             AND systypes.name IN ('text','ntext')
                     ORDER BY SCHEMA_NAME(o.uid), o.Name, col.Name
		  </query>
		  <detail></detail>
		</problem>
		<problem>
		  <name>Collation Mismatch</name>
		  <description>Find all columns where the collation does not match the database default.</description>
		  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/sql-server-collation-conflicts</reference>
		  <versions>
			<version>SQL2000</version>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>		  
		  <query>
			SELECT	C.TABLE_SCHEMA + '.' + C.TABLE_NAME + '.' + C.COLUMN_NAME As ProblemItem
			FROM	INFORMATION_SCHEMA.COLUMNS C
					INNER JOIN INFORMATION_SCHEMA.TABLES T            
						ON C.Table_Name = T.Table_Name 
			WHERE	T.Table_Type = 'BASE TABLE'          
					AND COLLATION_NAME &lt;&gt; convert(VarChar(100), DATABASEPROPERTYEX(db_name(), 'Collation'))
					AND COLUMNPROPERTY(OBJECT_ID(C.TABLE_NAME), COLUMN_NAME, 'IsComputed') = 0 
			Order By C.TABLE_SCHEMA, C.TABLE_NAME, C.COLUMN_NAME
		  </query>
		  <detail></detail>
		</problem>
		<problem>
          <name>UniqueIdentifier with NewId</name>
		  <description>Find columns where the primary key is based on NewId()</description>
          <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/best-practice-don-t-not-cluster-on-uniqu</reference>
          <versions>
            <version>SQL2000</version>
            <version>SQL2005</version>
            <version>SQL2008</version>
          </versions>
          <query>
			SELECT  so.name + '.' + col.name AS ProblemItem
			FROM    sysobjects so
					INNER JOIN sysindexes sind
						ON so.id=sind.id
					INNER JOIN sysindexkeys sik
						ON sind.id=sik.id
						AND sind.indid=sik.indid
					INNER JOIN syscolumns col
						ON col.id=sik.id
						AND col.colid=sik.colid
					INNER JOIN systypes
						ON col.xtype = systypes.xtype
					INNER JOIN syscomments
						ON col.cdefault = syscomments.id
			WHERE	sind.Status &amp; 16 = 16
					AND systypes.name = 'uniqueidentifier'
					AND keyno = 1
					AND sind.OrigFillFactor = 0
					AND syscomments.TEXT COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%newid%'
			ORDER BY so.name, sik.keyno
          </query>
          <detail></detail>
        </problem>
      </problems>  
    </category>
    <category>
      <type>Table/Views</type>
      <problems>
        <problem>
          <name>tbl Table Prefix</name>
		  <description>Find all tables that start with tbl</description>
          <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/don-t-prefix-your-table-names-with-tbl</reference>
          <versions>
            <version>SQL2000</version>
            <version>SQL2005</version>
            <version>SQL2008</version>
          </versions>
          <query>
            SELECT	TABLE_SCHEMA + '.' + TABLE_NAME As ProblemItem
            From	INFORMATION_SCHEMA.TABLES
            WHERE	TABLE_TYPE = 'BASE TABLE'
					And TABLE_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE 'tbl%'
            Order By TABLE_SCHEMA,TABLE_NAME
          </query>
          <detail></detail>
        </problem>
        <problem>
          <name>Table Name Problems</name>
		  <description>Find all tables poorly named</description>
          <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/do-not-use-spaces-or-other-invalid-chara</reference>
          <versions>
            <version>SQL2000</version>
            <version>SQL2005</version>
            <version>SQL2008</version>
          </versions>
          <query>
            DECLARE @AcceptableSymbols VARCHAR(100)

            SET @AcceptableSymbols = '_$'

            SELECT  TABLE_SCHEMA + '.' + TABLE_NAME As ProblemItem
            FROM    INFORMATION_SCHEMA.TABLES
            WHERE   TABLE_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%[^a-z' + @AcceptableSymbols + ']%'
			ORDER BY TABLE_SCHEMA,TABLE_NAME
          </query>
          <detail></detail>
        </problem>
		<problem>
		  <name>Missing Foreign Keys</name>
		  <description>Find all columns that end in ID but not included in a foreign key relationship</description>
		  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/missing-foreign-key-constraints</reference>
		  <versions>
			<version>SQL2000</version>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>
		  <query>
			SELECT  C.TABLE_SCHEMA + '.' + C.TABLE_NAME + '.' + C.COLUMN_NAME As ProblemItem
			FROM    INFORMATION_SCHEMA.COLUMNS C          
			        INNER Join INFORMATION_SCHEMA.TABLES T            
			          ON C.TABLE_NAME = T.TABLE_NAME    
			          AND T.TABLE_TYPE = 'BASE TABLE'
			          AND T.TABLE_SCHEMA = C.TABLE_SCHEMA        
			        LEFT Join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE U            
			          ON C.TABLE_NAME = U.TABLE_NAME            
			          AND C.COLUMN_NAME = U.COLUMN_NAME
			          AND U.TABLE_SCHEMA = C.TABLE_SCHEMA
			WHERE   U.COLUMN_NAME IS Null          
			        AND C.COLUMN_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%id'
			ORDER BY C.TABLE_SCHEMA, C.TABLE_NAME, C.COLUMN_NAME
		  </query>
		  <detail></detail>
		</problem>
		<problem>
		  <name>Wide Tables</name>
		  <description>Find all columns where the combined defined size exceeds the 8060 byte limit.</description>
		  <reference>http://wiki.lessthandot.com/index.php/SQLCop_wide_table_check</reference>
		  <versions>
			<version>SQL2000</version>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>
		  <query>
			Select  C.TABLE_SCHEMA + '.' + C.TABLE_NAME As ProblemItem
			From    INFORMATION_SCHEMA.TABLES T
					INNER JOIN INFORMATION_SCHEMA.COLUMNS C
					  On  T.TABLE_NAME = C.TABLE_NAME
					  AND T.TABLE_SCHEMA = C.TABLE_SCHEMA
					  And T.TABLE_TYPE = 'BASE TABLE'
					INNER JOIN systypes S
						On C.DATA_TYPE = S.name
			GROUP BY C.TABLE_SCHEMA + '.' + C.TABLE_NAME
			HAVING SUM(ISNULL(NULLIF(CONVERT(BIGINT,S.Length), 8000), 0) + ISNULL(NULLIF(C.CHARACTER_MAXIMUM_LENGTH, 2147483647), 0)) > 8060
			ORDER BY C.TABLE_SCHEMA + '.' + C.TABLE_NAME
		  </query>
		  <detail></detail>
		</problem>
        <problem>
          <name>Tables without a primary key</name>
		  <description>Find all tables without a primary key.</description>
          <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/best-practice-every-table-should-have-a</reference>
          <versions>
            <version>SQL2000</version>
            <version>SQL2005</version>
            <version>SQL2008</version>
          </versions>
          <query>
			SELECT	su.name + '.' + AllTables.Name As ProblemItem
			FROM	(
					SELECT	Name, id, uid
					From	sysobjects
					WHERE	xtype = 'U'
					) AS AllTables
					INNER JOIN sysusers su
						On AllTables.uid = su.uid
					LEFT JOIN (
						SELECT parent_obj
						From sysobjects
						WHERE  xtype = 'PK'
						) AS PrimaryKeys
						ON AllTables.id = PrimaryKeys.parent_obj
			WHERE	PrimaryKeys.parent_obj Is Null
			ORDER BY su.name,AllTables.Name
          </query>
          <detail></detail>
        </problem>
		<problem>
		  <name>Empty Tables</name>
		  <description>Find all tables without any rows.</description>
		  <reference>http://wiki.lessthandot.com/index.php/List_all_empty_tables_in_your_SQL_Server_database</reference>
		  <versions>
			<version>SQL2000</version>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>
		  <query>
			SET NOCOUNT ON
			CREATE TABLE #EmptyTables(Table_Name VarChar(100))  
			EXEC 	sp_MSforeachtable 'IF NOT EXISTS(SELECT 1 FROM ?) INSERT INTO #EmptyTables VALUES(''?'')' 
			SELECT Table_Name As ProblemItem 
			FROM	#EmptyTables 
			ORDER BY Table_Name 
			DROP TABLE #EmptyTables
		  </query>
		  <detail></detail>
		</problem>
		<problem>
			<name>Unnamed Constraints</name>
			<description>Find all constraints with SQL Server default names</description>
			<reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/how-to-name-default-constraints-and-how-</reference>
			<versions>
				<version>SQL2000</version>
				<version>SQL2005</version>
				<version>SQL2008</version>
			</versions>
			<query>
				SELECT CONSTRAINT_SCHEMA + '.' + CONSTRAINT_NAME AS ProblemItem 
				From	INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE
				Where	CONSTRAINT_NAME collate sql_latin1_general_CP1_CI_AI Like '%[_][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]'
					And TABLE_NAME &lt;&gt; 'sysdiagrams'
				Order By CONSTRAINT_SCHEMA + '.' + CONSTRAINT_NAME
			</query>
			<detail>SELECT 'sp_rename ''~ProblemItem~'',''New_Constraint_Name_Here'''</detail>
		</problem>
		<problem>
		  <name>Views with order by</name>
		  <description>Find views that include the ORDER BY clause.</description>
		  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/create-a-sorted-view-in-sql-server-2005--2008</reference>
		  <versions>
			<version>SQL2000</version>
			<version>SQL2005</version>
			<version>SQL2008</version>
		  </versions>
		  <query>
			SELECT DISTINCT sysusers.name + '.' + sysobjects.name as ProblemItem
			FROM   sysobjects
				   INNER JOIN syscomments
					  ON sysobjects.id = syscomments.id
				   INNER JOIN sysusers
					  ON sysobjects.uid = sysusers.uid
			WHERE  xtype = 'V'
					and syscomments.text COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI like '%order by%'
			ORDER BY sysusers.name + '.' + sysobjects.name
		  </query>
		  <detail>
			Select Text
			FROM syscomments
			where id=object_id('~ProblemItem~')
			order by colid
		  </detail>
		</problem>
	  </problems>
    </category>
	  <category>
		<type>Indexes</type>
		<problems>
<problem>
  <name>Forwarded Records</name>
  <description>Find tables with forwarded records.</description>
  <reference>http://wiki.lessthandot.com/index.php/Finding_Forwarded_Records_SQL_Server_2008</reference>
  <versions>
    <version>SQL2005</version>
  </versions>
  <query>
    If Exists(Select cmptlevel from master.dbo.sysdatabases Where dbid = db_ID() And cmptlevel > 80)
      Exec ('SELECT SCHEMA_NAME(O.Schema_Id) + ''.'' + O.name As ProblemItem
             FROM   sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, ''DETAILED'') AS ps
                    INNER JOIN sys.indexes AS i      
                      ON ps.OBJECT_ID = i.OBJECT_ID
                      AND ps.index_id = i.index_id
                    INNER JOIN sys.objects as O
                      On i.OBJECT_ID = O.OBJECT_ID
             WHERE  ps.forwarded_record_count > 0
             Order By SCHEMA_NAME(O.Schema_Id),O.name')
    Else
      Select 'Unable to check index forwarded records when compatibility is set to 80 or below' As ProblemItem
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Forwarded Records</name>
  <description>Find tables with forwarded records.</description>
  <reference>http://wiki.lessthandot.com/index.php/Finding_Forwarded_Records_SQL_Server_2008</reference>
  <versions>
    <version>SQL2008</version>
  </versions>
  <query>
    If Exists(Select cmptlevel from master.dbo.sysdatabases Where dbid = db_ID() And cmptlevel > 80)
      Exec ('SELECT SCHEMA_NAME(O.Schema_Id) + ''.'' + O.name As ProblemItem
             FROM   sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, ''DETAILED'') AS ps
                    INNER JOIN sys.indexes AS i      
                      ON ps.OBJECT_ID = i.OBJECT_ID
                      AND ps.index_id = i.index_id
                    INNER JOIN sys.objects as O
                      On i.OBJECT_ID = O.OBJECT_ID
             WHERE  ps.forwarded_record_count > 0
             Order By SCHEMA_NAME(O.Schema_Id),O.name')
    Else
      Select 'Unable to check index forwarded records when compatibility is set to 80 or below' As ProblemItem
  </query>
  <detail>Select 'Alter Table ~ProblemItem~ Rebuild'</detail>
</problem>
		  <problem>
			<name>Fragmented indexes</name>
			<description>Find all indexes where fragmentation exceeds 30%</description>
			<reference>http://wiki.lessthandot.com/index.php/Finding_Fragmentation_Of_An_Index_And_Fixing_It</reference>
			<versions>
			  <version>SQL2005</version>
			  <version>SQL2008</version>			  
			</versions>
			<query>
			  If Exists(Select cmptlevel from master.dbo.sysdatabases Where dbid = db_ID() And cmptlevel > 80)
				If Exists(Select 1 From fn_my_permissions(NULL, 'DATABASE') WHERE permission_name = 'VIEW DATABASE STATE')
					Exec('SELECT	OBJECT_NAME(OBJECT_ID) + ''.'' + s.name As ProblemItem
					FROM	sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, N''LIMITED'') d
					join sysindexes s
					ON	d.OBJECT_ID = s.id
					and d.index_id = s.indid
					Where	avg_fragmentation_in_percent >= 30
					And OBJECT_NAME(OBJECT_ID) + ''.'' + s.name > ''''
								And page_count > 1000
					Order By Object_Name(OBJECT_ID), s.name')
				Else
					Select 'You do not have VIEW DATABASE STATE permissions within this database' As ProblemItem
			  Else
			  Select 'Unable to check index fragmentation when compatibility is set to 80 or below' As ProblemItem
			</query>
			<detail>
			  Set NOCOUNT ON

			  Declare @Table VarChar(200)
			  Declare @Index VarChar(200)
			  Declare @Fragmentation Decimal(5,2)

			  Set @Table = ParseName('~ProblemItem~', 2)
			  Set @Index = ParseName('~ProblemItem~', 1)

			  If Exists(Select cmptlevel from master.dbo.sysdatabases Where dbid = db_ID() And cmptlevel > 80)
			  exec sp_executesql N'SELECT @Fragmentation = avg_fragmentation_in_percent
			  FROM   sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, N''LIMITED'') d
			  join sysindexes s
			  ON d.OBJECT_ID = s.id
			  and d.index_id = s.indid
			  and s.name = @Index', N'@Fragmentation Decimal(5,2) OUT, @Index VarChar(200)',@Fragmentation OUT,@Index = @Index
			  Else
			  Set @Fragmentation = NULL

			  If @Fragmentation &lt; 10
	         Select @Index+ ' Fragmentation = ' + Convert(VarChar(20), @Fragmentation)

        Else If @Fragmentation &lt; 30
	         Select '-- ' + @Index + ' Fragmentation = ' + Convert(VarChar(20), @Fragmentation)
                  + Char(13) + Char(10)
                  + 'Alter Index [' + @Index + '] on [' + @Table + '] REORGANIZE;'
        Else
	         Select Coalesce('-- ' + @Index + ' Fragmentation = ' + Convert(VarChar(20), @Fragmentation)
                  + Char(13) + Char(10)
                  + 'Alter Index [' + @Index + '] on [' + @Table + '] REBUILD;', '')
      </detail>
		  </problem>
      <problem>
        <name>Missing Foreign Key Indexes</name>
        <description>Find all foreign keys that do not have a corresponding index.</description>
        <reference>http://www.jasonstrate.com/2010/06/index-those-foreign-keys/</reference>
        <versions>
          <version>SQL2005</version>
          <version>SQL2008</version>
        </versions>
        <query>
		  If Exists(Select 1 From fn_my_permissions(NULL, 'DATABASE') WHERE permission_name = 'VIEW DATABASE STATE')
			  SELECT	Convert(VarChar(300), fk.foreign_key_name) As ProblemItem
			  FROM	(
			  SELECT	fk.name AS foreign_key_name,
			  'PARENT' as foreign_key_type,
			  fkc.parent_object_id AS object_id,
			  STUFF((	SELECT ', ' + QUOTENAME(c.name)
			  FROM	sys.foreign_key_columns ifkc
			  INNER JOIN sys.columns c
			  ON ifkc.parent_object_id = c.object_id
			  AND ifkc.parent_column_id = c.column_id
			  WHERE fk.object_id = ifkc.constraint_object_id
			  ORDER BY ifkc.constraint_column_id
			  FOR XML PATH('')), 1, 2, '') AS fk_columns,
			  (	SELECT	QUOTENAME(ifkc.parent_column_id,'(')
			  FROM	sys.foreign_key_columns ifkc
			  WHERE	fk.object_id = ifkc.constraint_object_id
			  ORDER BY ifkc.constraint_column_id
			  FOR XML PATH('')) AS fk_columns_compare
			  FROM	sys.foreign_keys fk
			  INNER JOIN sys.foreign_key_columns fkc
			  ON fk.object_id = fkc.constraint_object_id
			  WHERE fkc.constraint_column_id = 1

			  UNION ALL

			  SELECT	fk.name AS foreign_key_name,
			  'REFERENCED' as foreign_key_type,
			  fkc.referenced_object_id AS object_id,
			  STUFF((	SELECT	', ' + QUOTENAME(c.name)
			  FROM	sys.foreign_key_columns ifkc
			  INNER JOIN sys.columns c
			  ON ifkc.referenced_object_id = c.object_id
			  AND ifkc.referenced_column_id = c.column_id
			  WHERE fk.object_id = ifkc.constraint_object_id
			  ORDER BY ifkc.constraint_column_id
			  FOR XML PATH('')), 1, 2, '') AS fk_columns,
			  (	SELECT	QUOTENAME(ifkc.referenced_column_id,'(')
			  FROM	sys.foreign_key_columns ifkc
			  WHERE	fk.object_id = ifkc.constraint_object_id
			  ORDER BY ifkc.constraint_column_id
			  FOR XML PATH('')) AS fk_columns_compare
			  FROM	sys.foreign_keys fk
			  INNER JOIN sys.foreign_key_columns fkc
			  ON fk.object_id = fkc.constraint_object_id
			  WHERE	fkc.constraint_column_id = 1
			  ) fk
			  INNER JOIN (
			  SELECT	object_id,
			  SUM(row_count) AS row_count
			  FROM	sys.dm_db_partition_stats ps
			  WHERE index_id IN (1,0)
			  GROUP BY object_id
			  ) rc
			  ON fk.object_id = rc.object_id
			  LEFT OUTER JOIN (
			  SELECT	i.object_id,
			  i.name,
			  (
			  SELECT	QUOTENAME(ic.column_id,'(')
			  FROM	sys.index_columns ic
			  WHERE	i.object_id = ic.object_id
			  AND i.index_id = ic.index_id
			  AND is_included_column = 0
			  ORDER BY key_ordinal ASC
			  FOR XML PATH('')
			  ) AS indexed_compare
			  FROM sys.indexes i
			  ) i
			  ON fk.object_id = i.object_id
			  AND i.indexed_compare LIKE fk.fk_columns_compare + '%'
			  WHERE	i.name IS NULL
			  ORDER BY OBJECT_NAME(fk.object_id), fk.fk_columns
			Else
				Select 'You do not have VIEW DATABASE STATE permissions within this database' As ProblemItem
        </query>
        <detail>
          SELECT	'--Missing foreign key index for '+fk.foreign_key_name+CHAR(13)+CHAR(10)+
          +'CREATE NONCLUSTERED INDEX FKIX_'+OBJECT_NAME(fk.object_id)+'_'+REPLACE(REPLACE(REPLACE(REPLACE(fk.fk_columns,',',''),'[',''),']',''),' ','')
          +CHAR(13)+CHAR(10)+
          +'ON [dbo].['+OBJECT_NAME(fk.object_id)+'] ('+fk.fk_columns+')'+CHAR(13)+CHAR(10)
          FROM	(
          SELECT	fk.name AS foreign_key_name,
          'PARENT' as foreign_key_type,
          fkc.parent_object_id AS object_id,
          STUFF((	SELECT ', ' + QUOTENAME(c.name)
          FROM	sys.foreign_key_columns ifkc
          INNER JOIN sys.columns c
          ON ifkc.parent_object_id = c.object_id
          AND ifkc.parent_column_id = c.column_id
          WHERE fk.object_id = ifkc.constraint_object_id
          ORDER BY ifkc.constraint_column_id
          FOR XML PATH('')), 1, 2, '') AS fk_columns,
          (	SELECT	QUOTENAME(ifkc.parent_column_id,'(')
          FROM	sys.foreign_key_columns ifkc
          WHERE	fk.object_id = ifkc.constraint_object_id
          ORDER BY ifkc.constraint_column_id
          FOR XML PATH('')) AS fk_columns_compare
          FROM	sys.foreign_keys fk
          INNER JOIN sys.foreign_key_columns fkc
          ON fk.object_id = fkc.constraint_object_id
          WHERE fkc.constraint_column_id = 1

          UNION ALL

          SELECT	fk.name AS foreign_key_name,
          'REFERENCED' as foreign_key_type,
          fkc.referenced_object_id AS object_id,
          STUFF((	SELECT	', ' + QUOTENAME(c.name)
          FROM	sys.foreign_key_columns ifkc
          INNER JOIN sys.columns c
          ON ifkc.referenced_object_id = c.object_id
          AND ifkc.referenced_column_id = c.column_id
          WHERE fk.object_id = ifkc.constraint_object_id
          ORDER BY ifkc.constraint_column_id
          FOR XML PATH('')), 1, 2, '') AS fk_columns,
          (	SELECT	QUOTENAME(ifkc.referenced_column_id,'(')
          FROM	sys.foreign_key_columns ifkc
          WHERE	fk.object_id = ifkc.constraint_object_id
          ORDER BY ifkc.constraint_column_id
          FOR XML PATH('')) AS fk_columns_compare
          FROM	sys.foreign_keys fk
          INNER JOIN sys.foreign_key_columns fkc
          ON fk.object_id = fkc.constraint_object_id
          WHERE	fkc.constraint_column_id = 1
          ) fk
          INNER JOIN (
          SELECT	object_id,
          SUM(row_count) AS row_count
          FROM	sys.dm_db_partition_stats ps
          WHERE index_id IN (1,0)
          GROUP BY object_id
          ) rc
          ON fk.object_id = rc.object_id
          LEFT OUTER JOIN (
          SELECT	i.object_id,
          i.name,
          (
          SELECT	QUOTENAME(ic.column_id,'(')
          FROM	sys.index_columns ic
          WHERE	i.object_id = ic.object_id
          AND i.index_id = ic.index_id
          AND is_included_column = 0
          ORDER BY key_ordinal ASC
          FOR XML PATH('')
          ) AS indexed_compare
          FROM sys.indexes i
          ) i
          ON fk.object_id = i.object_id
          AND i.indexed_compare LIKE fk.fk_columns_compare + '%'
          WHERE	i.name IS NULL
          And fk.foreign_key_name = '~ProblemItem~'
          ORDER BY OBJECT_NAME(fk.object_id), fk.fk_columns
        </detail>
      </problem>
    </problems>
  </category>
  <category>
		<type>Configuration</type>
		<problems>
<problem>
  <name>Ad Hoc Distributed Queries</name>
  <description>Check if Ad Hoc Distributed Queries are enabled</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#Ad_Hoc_Distributed_Queries</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <minvalue>!</minvalue>
  <maxvalue>~</maxvalue>  
  <query>
    select 'Status: Ad Hoc Distributed Queries are enabled' As ProblemItem
    from   sys.configurations
    where  name = 'Ad Hoc Distributed Queries'
           and value_in_use = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Auto Close</name>
  <description>Find all databases set to Auto Close</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBAdmin/sql-server-auto-close</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select 'Database set to Auto Close' As ProblemItem 
    Where   DatabaseProperty(db_name(), 'IsAutoClose') = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Auto Create</name>
  <description>Find all databases where the database is not set to auto create statistics.</description>
  <reference>http://www.sql-server-performance.com/tips/optimizing_indexes_general_p1.aspx</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select 'Database not set to Auto Create Statistics' As ProblemItem 
    Where  DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 0
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Auto Shrink</name>
  <description>Find all databases set to Auto Shrink.</description>
  <reference>http://www.sqlskills.com/blogs/paul/post/Auto-shrink-e28093-turn-it-OFF!.aspx</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select 'Database set to Auto Shrink' As ProblemItem 
    Where   DatabaseProperty(db_name(), 'IsAutoShrink') = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Auto Update</name>
  <description>Find all databases not set to automatically update stastics.</description>
  <reference>http://www.microsoft.com/technet/abouttn/flash/tips/tips_070604.mspx</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select 'Database not set to Auto Update Statistics' As ProblemItem 
    Where  DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 0
  </query>
  <detail></detail>
</problem> 
<problem>
  <name>Backup compression is default</name>
  <description>Backup compression is enabled by default</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#Backup_compression_default</reference>
  <versions>
    <version>SQL2008</version>
  </versions>
  <minvalue>!</minvalue>
  <maxvalue>~</maxvalue>
  <query>
    select 'Status:  backup compression default' As ProblemItem
    from   sys.configurations
    where  name = 'backup compression default'
           and value_in_use = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>CLR</name>
  <description>Check if the Common Language Runtime (CLR) is enabled</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#CLR_enabled</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <minvalue>!</minvalue>
  <maxvalue>~</maxvalue>
  <query>
    select 'Status: Common Language Runtime is enabled' As ProblemItem
    from   sys.configurations
    where  name = 'clr enabled'
    and    value_in_use = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Compatibility Level</name>
  <description>Find all databases that have a compatibility level set to an old version.</description>
  <reference>http://wiki.lessthandot.com/index.php/Database_compatibilty_level</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select Name As ProblemItem
    FROM   master.dbo.sysdatabases
    WHERE  cmptlevel != 10 * CONVERT(Int, CONVERT(FLOAT, CONVERT(VARCHAR(3), SERVERPROPERTY('productversion'))))
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Database and Log files on the same physical disk</name>
  <description></description>
  <reference>http://www.brentozar.com/archive/2009/02/when-should-you-put-data-and-logs-on-the-same-drive/</reference>
  <versions>
    <version>SQL2000</version>
  </versions>
  <query>
    Select db_name() As ProblemItem
    FROM   sysfiles
    Having Count(*) != Count(Distinct Left(filename, 3)) 
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Database and Log files on the same physical disk</name>
  <description></description>
  <reference>http://www.brentozar.com/archive/2009/02/when-should-you-put-data-and-logs-on-the-same-drive/</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select db_name() As ProblemItem
    FROM   sys.database_files
    Having Count(*) != Count(Distinct Left(Physical_Name, 3)) 
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Database Collation</name>
  <description>Find all databases with a collation different than the server default.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/collation-conflicts-with-temp-tables-and</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select  'Warning: Collation conflict between user database and TempDB' As ProblemItem 
    Where   DatabasePropertyEx('TempDB', 'Collation') &lt;&gt; DatabasePropertyEx(db_name(), 'Collation')
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Database Mail</name>
  <description>Check if Database Mail procedures are enabled</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#Database_Mail_XPs</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <minvalue>!</minvalue>
  <maxvalue>~</maxvalue>
  <query>
    select 'Status: Database Mail procedures are enabled' As ProblemItem
    from   sys.configurations
    where  name = 'Database Mail XPs'
           and value_in_use = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Deprecated Features</name>
  <description>Find out if you are using deprecated features.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/find-out-if-you-are-using-deprecated-fea-2008</reference>
  <versions>
    <version>SQL2008</version>
  </versions>
  <query>
    SELECT instance_name,cntr_value
    FROM   sys.dm_os_performance_counters
    WHERE  OBJECT_NAME collate sql_latin1_general_CP1_CI_AI Like '%:Deprecated Features'
           and cntr_value > 0
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Instant File Initialization</name>
  <description>Determine whether instant file initialization is enabled</description>
  <reference>http://www.bradmcgehee.com/2010/07/instant-file-initialization-speeds-sql-server/#more-1704</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    SET NOCOUNT ON
    Create Table #Output(Value VarChar(8000))
    If Exists(select * from sys.configurations Where name='xp_cmdshell' and value_in_use = 1)
      Begin
		If Is_SrvRoleMember('sysadmin') = 1
			Begin
				Insert Into #Output EXEC ('xp_cmdshell ''whoami /priv''');

				If Not Exists(Select 1 From #Output Where Value LIKE '%SeManageVolumePrivilege%')
				  Select 'Instant File Initialization disabled' As ProblemItem
				Else
				  Select 'Instant File Initialization disabled' As ProblemItem
				  From   #Output
				  Where  Value LIKE '%SeManageVolumePrivilege%'
						 And Value Like '%disabled%'
			End
		Else
			Select 'You do not have the appropriate permissions to run xp_cmdshell' As ProblemItem
      End
    Else
      Begin
        Select 'xp_cmdshell must be enabled to determine if instant file initialization is enabled.' As ProblemItem
      End
    Drop Table #Output
  </query>
  <detail>
     Select '-- To enable xp_cmdshell' + Char(13) + Char(10)
            + 'EXEC sp_configure ''show advanced options'', 1' + Char(13) + Char(10)
            + 'GO' + Char(13) + Char(10)
            + 'RECONFIGURE WITH OVERRIDE;' + Char(13) + Char(10)
            + 'GO' + Char(13) + Char(10)
            + 'EXEC sp_configure ''xp_cmdshell'', 1;' + Char(13) + Char(10)
            + 'GO' + Char(13) + Char(10)
            + 'RECONFIGURE WITH OVERRIDE;' + Char(13) + Char(10)
            + 'GO ' + Char(13) + Char(10)
            + '-- Make sure you disable xp_cmdshell when you are done.' + Char(13) + Char(10)
    Where Left('~ProblemItem~',11) = 'xp_cmdshell'
  </detail>
</problem>
<problem>
  <name>Login Language</name>
  <description>Find logins with a default language that does not match the server default.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/setting-a-standard-dateformat-for-sql-se</reference>
  <versions>
    <version>SQL2000</version>
  </versions>
  <query>
    Declare @DefaultLanguage VarChar(100)  
    Select  @DefaultLanguage = L.Name 
    From    Master.dbo.sysconfigures C         
            Inner Join Master.dbo.syslanguages L             
              On C.Value = L.LangId             
              And C.Comment = 'default Language'  

    Select  Name As ProblemItem
    From    master..syslogins 
    Where   Language &lt;&gt; @DefaultLanguage 
    Order By Name
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Login Language</name>
  <description>Find logins with a default language that does not match the server default.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/setting-a-standard-dateformat-for-sql-se</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Declare @DefaultLanguage VarChar(100)
    Select  @DefaultLanguage = L.Name
    From    Master.dbo.sysconfigures C
            Inner Join Master.dbo.syslanguages L
              On C.Value = L.LangId
              And C.Comment = 'default Language'

    Select  Name As ProblemItem
    From    master..syslogins
    Where   Language &lt;&gt; @DefaultLanguage
    Order By Name
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Max degree of parallelism</name>
  <description>Check the value of max degree of parallelism</description>
  <reference>http://sqlblog.com/blogs/adam_machanic/archive/2010/05/28/sql-university-parallelism-week-part-3-settings-and-options.aspx</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    select 'Warning: Max degree of parallelism is setup to use all cores' As ProblemItem
    from   sys.configurations
    where  name = 'max degree of parallelism'
           and value_in_use = 0
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Old Backups</name>
  <description>Find all databases that have not been backed up in the last 7 days.</description>
  <reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBAdmin/the-sql-server-backup-foundation-of-any</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select  'Outdated Backup For '+ D.Name As ProblemItem
    FROM    Master..sysdatabases As D         
            Left Join MSDB.dbo.BackupSet As B             
              On  B.database_name = D.Name             
              And B.Type = 'd' 
    WHERE   D.Status &amp; 512 = 0 
    GROUP BY D.Name 
    Having Coalesce(DATEDIFF(D, Max(Backup_Finish_Date), Getdate()), 1000) > 7 
    ORDER BY D.Name
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Ole Automation Procedures</name>
  <description>Check if Ole Automation procedures are enabled</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#Ole_Automation_Procedures</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    select 'Warning: Ole Automation procedures are enabled' As ProblemItem
    from   sys.configurations
    where  name = 'Ole Automation Procedures'
           and value_in_use = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>Orphaned Users</name>
  <description>Find all orphaned users in the current database.</description>
  <reference>http://wiki.lessthandot.com/index.php/Fix_Orphaned_Database_Users</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Set NOCOUNT ON
	If is_rolemember('db_owner') = 1
		Begin
			Declare @Temp Table(UserName sysname, UserSid VarBinary(85))

			Insert Into @Temp Exec sp_change_users_login 'report'

			Select UserName As ProblemItem
			From   @Temp
			Order By UserName
		End
	Else
		Select 'Only members of db_owner can perform this check.' As ProblemItem
  </query>
  <detail>
    Select 'If EXISTS(SELECT 1 FROM sys.schemas WHERE name = ''~ProblemItem~'')' + CHAR(13) + CHAR(10)
      + '  DROP SCHEMA [~ProblemItem~]' + CHAR(13) + CHAR(10)
      + 'DROP USER [~ProblemItem~]'
  </detail>
</problem>
<problem>
  <name>Service account</name>
  <description>Service account is set to LocalSystem</description>
  <reference>http://msdn.microsoft.com/en-us/library/ms143504.aspx#Use_startup_accounts</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    SET NOCOUNT ON
    --Declare a variable to hold the value
    DECLARE @serviceaccount varchar(100)

    --Retrieve the Service account from registry
    EXECUTE master.dbo.xp_instance_regread
            N'HKEY_LOCAL_MACHINE',
            N'SYSTEM\CurrentControlSet\Services\MSSQLSERVER',
            N'ObjectName',
            @ServiceAccount OUTPUT,
            N'no_output'

    --Display the Service Account
    SELECT 'Service account set to LocalSystem' As ProblemItem
    Where  @ServiceAccount = 'LocalSystem'		  	
  </query>
  <detail></detail>
</problem>
<problem>
  <name>SMO and DMO</name>
  <description>Check if SMO and DMO procedures are enabled</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#SMO_and_DMO_XPs</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <minvalue>!</minvalue>
  <maxvalue>~</maxvalue>
  <query>
    select 'Status: SMO and DMO procedures are enabled' As ProblemItem
    from   sys.configurations
    where  name = 'SMO and DMO XPs'
           and value_in_use = 1
  </query>
  <detail></detail>
</problem>
<problem>
  <name>SQL Server Agent Service</name>
  <description>Determine if the SQL Server Agent service is started.</description>
  <reference>http://wiki.lessthandot.com/index.php/Find_out_if_SQL_Agent_running</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    SET NOCOUNT ON
    DECLARE @service NVARCHAR(100)

    If Convert(VarChar(100), ServerProperty('Edition')) Like 'Express%'
      Select 'SQL Server Agent not installed for express editions' As ProblemItem
    Else If Is_SrvRoleMember('sysadmin') = 0
      Select 'You need to be a member of the sysadmin server role to run this check' As ProblemItem
    Else
      Begin
        SELECT @service = CASE WHEN CHARINDEX('\',@@SERVERNAME)>0
               THEN N'SQLAgent$'+@@SERVICENAME
               ELSE N'SQLSERVERAGENT' END

        Create Table #Temp(Output VarChar(1000))
        Insert Into #Temp
        EXEC master..xp_servicecontrol N'QUERYSTATE', @service 

        Select Top 1 Output As ProblemItem From #Temp Where Output Not Like 'Running%'
        Drop Table #Temp
      End
  </query>
  <detail></detail>
</problem>
<problem>
  <name>User Aliases</name>
  <description>Find all user aliases in the current database.</description>
  <reference>http://www.mssqltips.com/tip.asp?tip=1675</reference>
  <versions>
    <version>SQL2000</version>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    Select Name As ProblemItem 
    From   sysusers 
    Where  IsAliased = 1 
    Order By Name
  </query>
  <detail></detail>
</problem>
<problem>
  <name>xp_cmdshell</name>
  <description>Check if xp_cmdshell is enabled</description>
  <reference>http://wiki.lessthandot.com/index.php/SQLCop_informational_checks#xp_cmdshell</reference>
  <versions>
    <version>SQL2005</version>
    <version>SQL2008</version>
  </versions>
  <query>
    select 'Warning: xp_cmdshell is enabled' As ProblemItem
    from   sys.configurations
    where  name = 'xp_cmdshell'
           and value_in_use = 1
  </query>
  <detail></detail>
</problem>
</problems>
	  </category>
<category>
	<type>Health</type>
	<problems>
		<problem>
			<name>Buffer cache hit ratio</name>
			<description>Percentage of queries found in the buffer cache.</description>
			<reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/use-sys-dm_os_performance_counters-to-ge</reference>
			<versions>
			  <version>SQL2005</version>
			  <version>SQL2008</version>
			</versions>
			<query>
				If Exists(Select 1 From fn_my_permissions(NULL, 'SERVER') WHERE permission_name = 'VIEW SERVER STATE')
					SELECT Convert(DECIMAL(4,1), (a.cntr_value * 1.0 / b.cntr_value) * 100.0) AS ProblemItem
					FROM   sys.dm_os_performance_counters  a
						   JOIN  (
							  SELECT cntr_value,OBJECT_NAME
								  FROM   sys.dm_os_performance_counters  
								  WHERE  counter_name collate SQL_LATIN1_GENERAL_CP1_CI_AI = 'Buffer cache hit ratio base'
										 AND OBJECT_NAME collate SQL_LATIN1_GENERAL_CP1_CI_AI like '%Buffer Manager%'
								 ) b 
							 ON  a.OBJECT_NAME = b.OBJECT_NAME
					WHERE a.counter_name collate SQL_LATIN1_GENERAL_CP1_CI_AI = 'Buffer cache hit ratio'
						  AND a.OBJECT_NAME collate SQL_LATIN1_GENERAL_CP1_CI_AI like '%:Buffer Manager%'
				Else
					Select 'You do not have VIEW SERVER STATE permissions within this instance.' As ProblemItem
			</query>
			<minvalue>0</minvalue>
			<maxvalue>95</maxvalue>
			<detail></detail>
		</problem>
		<problem>
			<name>Page life expectancy</name>
			<description>Number of seconds a page will stay in the buffer pool.</description>
			<reference>http://blogs.lessthandot.com/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/use-sys-dm_os_performance_counters-to-ge#PLE</reference>
			<versions>
			  <version>SQL2005</version>
			  <version>SQL2008</version>
			</versions>
			<minvalue>0</minvalue>
			<maxvalue>300</maxvalue>
			<query>
				If Exists(Select 1 From fn_my_permissions(NULL, 'SERVER') WHERE permission_name = 'VIEW SERVER STATE')
					SELECT cntr_value as ProblemItem
					FROM   sys.dm_os_performance_counters  
					WHERE  counter_name collate SQL_LATIN1_GENERAL_CP1_CI_AI = 'Page life expectancy'
						   AND OBJECT_NAME collate SQL_LATIN1_GENERAL_CP1_CI_AI like '%:Buffer Manager%'
				Else
					Select 'You do not have VIEW SERVER STATE permissions within this instance.' As ProblemItem
			</query>
			<detail></detail>
		</problem>
	</problems>
</category>
  </sqlserver>
</sqlcop>		